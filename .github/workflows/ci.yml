name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: gitte_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: testuser
          MINIO_ROOT_PASSWORD: testpass123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-mock
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/gitte_test" >> .env
        echo "MINIO_ENDPOINT=localhost:9000" >> .env
        echo "MINIO_ACCESS_KEY=testuser" >> .env
        echo "MINIO_SECRET_KEY=testpass123" >> .env
        echo "ENVIRONMENT=test" >> .env
    
    - name: Run database migrations
      run: |
        python -m alembic upgrade head
    
    - name: Run code quality checks
      run: |
        # Ruff linting
        ruff check src/ tests/
        
        # Black formatting check
        black --check src/ tests/
        
        # MyPy type checking (strict for services)
        mypy src/services/ --strict
        mypy src/logic/ --strict
        
        # Bandit security check
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run unit tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=85 \
          --maxfail=5 \
          -v \
          -m "not slow and not gpu and not e2e"
    
    - name: Run integration tests
      run: |
        pytest tests/ \
          --cov=src \
          --cov-append \
          --maxfail=3 \
          -v \
          -m "integration and not gpu"
    
    - name: Run smoke tests
      run: |
        python tests/test_e2e.py
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json
          pytest-report.xml

  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/test_performance.py \
          --benchmark-only \
          --benchmark-json=benchmark.json \
          -v
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-security-report.json
    
    - name: Run semgrep security scan
      run: |
        semgrep --config=auto src/ --json --output=semgrep-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-security-report.json
          semgrep-report.json

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: gitte_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install playwright pytest-playwright
        playwright install
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/gitte_test" >> .env
        echo "ENVIRONMENT=test" >> .env
    
    - name: Run database migrations
      run: |
        python -m alembic upgrade head
    
    - name: Run end-to-end tests
      run: |
        pytest tests/test_e2e.py \
          --maxfail=3 \
          -v \
          -m "e2e"
    
    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          screenshots/

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t gitte:test .
    
    - name: Test Docker image
      run: |
        # Start services with docker-compose
        docker-compose -f docker-compose.yml up -d postgres minio
        
        # Wait for services to be ready
        sleep 30
        
        # Run container with test command
        docker run --rm \
          --network gitte_default \
          -e DATABASE_URL=postgresql://gitte:gitte_password@postgres:5432/gitte \
          -e MINIO_ENDPOINT=minio:9000 \
          gitte:test \
          python -m pytest tests/ -m "not gpu and not e2e" --maxfail=5
    
    - name: Clean up
      if: always()
      run: |
        docker-compose down -v

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, performance-tests, security-scan, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here
    
    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add staging smoke tests here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, performance-tests, security-scan, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment steps here
    
    - name: Run production smoke tests
      run: |
        echo "Running smoke tests against production..."
        # Add production smoke tests here
    
    - name: Notify deployment success
      run: |
        echo "Production deployment completed successfully!"