version: '3.8'

services:
  gitte-app:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "8501:8501"
    environment:
      - ENVIRONMENT=production
      - POSTGRES_DSN=postgresql://gitte:${POSTGRES_PASSWORD}@postgres:5432/kiro_test
      - OLLAMA_URL=http://ollama:11434
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - REDIS_URL=redis://redis:6379/0
      # UX Enhancement Configuration
      - UX_FEATURES_ENABLED=true
      - IMAGE_CORRECTION_ENABLED=true
      - TOOLTIP_SYSTEM_ENABLED=true
      - PREREQUISITE_VALIDATION_ENABLED=true
      - ACCESSIBILITY_FEATURES_ENABLED=true
      - PERFORMANCE_MONITORING_ENABLED=true
      - LAZY_LOADING_ENABLED=true
      - CACHING_ENABLED=true
      # Performance Configuration (Production Optimized)
      - CACHE_TTL_SECONDS=7200
      - MAX_CACHE_SIZE_MB=1024
      - LAZY_LOADING_TIMEOUT_SECONDS=60
      - PREREQUISITE_CACHE_TTL_SECONDS=600
      - TOOLTIP_CACHE_TTL_SECONDS=3600
      # Image Processing Configuration
      - IMAGE_QUALITY_THRESHOLD=0.7
      - MAX_IMAGE_SIZE_MB=20
      - SUPPORTED_IMAGE_FORMATS=png,jpg,jpeg,webp
      - BACKGROUND_REMOVAL_ENABLED=true
      # Accessibility Configuration
      - WCAG_COMPLIANCE_LEVEL=AA
      - HIGH_CONTRAST_ENABLED=true
      - KEYBOARD_NAVIGATION_ENABLED=true
      - SCREEN_READER_SUPPORT_ENABLED=true
      # Monitoring Configuration
      - METRICS_ENABLED=true
      - PERFORMANCE_LOGGING_ENABLED=true
      - ERROR_TRACKING_ENABLED=true
    volumes:
      - ./config:/app/config:ro
      - app_logs:/app/logs
      - generated_images:/app/generated_images
    depends_on:
      - postgres
      - ollama
      - minio
      - redis
    networks:
      - gitte-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=kiro_test
      - POSTGRES_USER=gitte
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost in production
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - gitte-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gitte -d kiro_test"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  ollama:
    image: ollama/ollama:latest
    ports:
      - "127.0.0.1:11434:11434"  # Only bind to localhost in production
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - gitte-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  minio:
    image: minio/minio:latest
    ports:
      - "127.0.0.1:9000:9000"    # Only bind to localhost in production
      - "127.0.0.1:9001:9001"    # Only bind to localhost in production
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MINIO_BROWSER_REDIRECT_URL=https://minio.yourdomain.com
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - gitte-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost in production
    command: >
      redis-server
      --appendonly yes
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - gitte-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Reverse proxy for production (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - gitte-app
    networks:
      - gitte-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log aggregation (optional)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - gitte-network
    restart: unless-stopped

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - gitte-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

volumes:
  postgres_data:
    driver: local
  ollama_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  generated_images:
    driver: local

networks:
  gitte-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16